theme_minimal()
display_and_save_plot(p6, "cancellation_by_customer_type.png")
# -----------------------
# 2. Data Engineering
# -----------------------
library(dplyr)
# Ensure numerical conversion before calculation
hotels <- hotels %>%
mutate(
ArrivalDate = as.Date(ArrivalDate),
# Extract year and day
ArrivalDateYear = format(ArrivalDate, "%Y"),
ArrivalDateDayOfMonth = format(ArrivalDate, "%d"),
# Convert factor to numeric before operations
PreviousCancellations = as.numeric(as.character(PreviousCancellations)),
PreviousBookingsNotCanceled = as.numeric(as.character(PreviousBookingsNotCanceled)),
# Total nights
TotalNights = StaysInWeekendNights + StaysInWeekNights,
# Weekend stay ratio
IsWeekendStayRatio = ifelse(TotalNights > 0, StaysInWeekendNights / TotalNights, 0),
# Cancellation ratio
PreviousCancellation = ifelse(
PreviousBookingsNotCanceled + PreviousCancellations > 0,
PreviousCancellations / (PreviousBookingsNotCanceled + PreviousCancellations),
0
),
# Season based on month
Season = ifelse(ArrivalDateDayOfMonth %in% c("December", "January", "February"), "Winter",
ifelse(ArrivalDateDayOfMonth %in% c("March", "April", "May"), "Spring",
ifelse(ArrivalDateDayOfMonth %in% c("June", "July", "August"), "Summer", "Autumn"))),
# Parking flag
RequiredCarParkingSpacesFlag = ifelse(RequiredCarParkingSpaces > 0, "Yes", "No"),
# Country group
CountryGroup = case_when(
Country == "PRT" ~ "Portugal",
Country %in% c("ESP", "GBR", "FRA", "DEU", "ITA") ~ "TopMarket",
Country %in% c("USA", "BEL", "BRA", "CHE", "IRL", "NLD") ~ "MediumMarket",
Country %in% c("AUT", "CHN", "ISR", "SWE", "POL") ~ "LowMarket",
TRUE ~ "MinorMarket"
),
# Special request flag
HadSpecialRequest = ifelse(TotalOfSpecialRequests > 0, "Yes", "No"),
# Agent known flag
AgentKnown = ifelse(is.na(Agent) | Agent == "NULL" | Agent == "", "No", "Yes")
)
# Convert selected variables to factor
factor_vars <- c(
"Meal", "Country", "MarketSegment", "DistributionChannel", "IsRepeatedGuest",
"ReservedRoomType", "BookingChanges", "DepositType", "Agent", "Company",
"CustomerType", "IsCanceled"
)
hotels[factor_vars] <- lapply(hotels[factor_vars], factor)
# view the first few rows
knitr::kable(head(hotels, n = 10), format = "html", caption = "First 10 rows of the hotels dataset") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed")) %>%
column_spec(1:ncol(hotels), extra_css = "text-align: center;")
# Automatically install and load packages if not already installed
required_packages <- c("tidyverse", "GGally", "corrplot", "rpart", "rpart.plot",
"randomForest", "lubridate", "pivottabler", "kableExtra",
"magrittr", "caret", "xgboost", "pROC", "psych", "MASS", "scales")
for(pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
# -----------------------
# 3. Data Visualization: Focus on IsCanceled
# -----------------------
library(dplyr)
library(ggplot2)
# Ensure ArrivalDate is valid and create clean month variable
hotels <- hotels %>%
mutate(
ArrivalDate = as.Date(ArrivalDate),
ArrivalDateMonth = format(ArrivalDate, "%B")
) %>%
filter(!is.na(ArrivalDateMonth))  # Remove rows with NA dates
# Set factor levels explicitly for ordered months
hotels$ArrivalDateMonth <- factor(hotels$ArrivalDateMonth, levels = month.name)
# Create the plot
hotels %>%
group_by(ArrivalDateMonth, IsCanceled) %>%
summarise(Count = n(), .groups = "drop") %>%
group_by(ArrivalDateMonth) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
ggplot(aes(x = ArrivalDateMonth, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 3) +
labs(title = "Booking Cancellations by Month", x = "Month", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"), name = "Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 1. Booking Cancellation Percentages
cancel_counts <- table(hotels$IsCanceled)
cancel_pct <- prop.table(cancel_counts) * 100
cancel_df <- data.frame(
Status = factor(c("Not Canceled", "Canceled"), levels = c("Not Canceled", "Canceled")),
Percentage = as.numeric(cancel_pct)
)
p1 <- ggplot(cancel_df, aes(x = Status, y = Percentage, fill = Status)) +
geom_bar(stat = "identity", width = 0.6) +
geom_text(aes(label = sprintf("%.2f%%", Percentage)), vjust = -0.5, size = 5) +
scale_fill_manual(values = c("Not Canceled" = "#617CFF", "Canceled" = "#9DDB7D")) +
labs(title = "Booking Cancellation Percentages", x = "IsCanceled", y = "Percentage of Bookings%") +
theme_minimal()
display_and_save_plot(p1, "booking_cancellation_percentages.png")
# 2. Lead Time by Cancellation Status
p2 <- ggplot(hotels, aes(x = factor(IsCanceled, labels = c("Not Canceled", "Canceled")), y = LeadTime)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Lead Time Distribution by Cancellation Status", x = "Cancellation Status", y = "Lead Time (days)")
display_and_save_plot(p2, "lead_time_by_status.png")
# 3. Cancellation Percentage by Deposit Type
p3 <- hotels %>%
group_by(DepositType, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(DepositType) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
ggplot(aes(x = DepositType, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Deposit Type", x = "Deposit Type", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"), name = "Status") +
theme_minimal()
display_and_save_plot(p3, "cancellation_by_deposit_type.png")
# 4. Cancellation Percentage by Season
p4 <- hotels %>%
group_by(Season, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(Season) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
ggplot(aes(x = Season, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Season", x = "Season", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"), name = "Status") +
theme_minimal()
display_and_save_plot(p4, "cancellation_by_season.png")
# 5. Cancellation Percentage by Month
p5 <- hotels %>%
group_by(ArrivalDateMonth, IsCanceled) %>%
summarise(Count = n(), .groups = "drop") %>%
group_by(ArrivalDateMonth) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
ggplot(aes(x = ArrivalDateMonth, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 3) +
labs(title = "Booking Cancellations by Month", x = "Month", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"), name = "Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
display_and_save_plot(p5, "cancellation_by_month.png")
# 6. Cancellation Percentage by Customer Type
p6 <- hotels %>%
group_by(CustomerType, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(CustomerType) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
ggplot(aes(x = CustomerType, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Customer Type", x = "Customer Type", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"), name = "Status") +
theme_minimal()
display_and_save_plot(p6, "cancellation_by_customer_type.png")
# -----------------------
# 3. Data Visualization: Focus on IsCanceled
# -----------------------
library(dplyr)
library(ggplot2)
# 1. Booking Cancellation Percentages
cancel_counts <- table(hotels$IsCanceled)
cancel_pct <- prop.table(cancel_counts) * 100
cancel_df <- data.frame(
Status = factor(c("Not Canceled", "Canceled"), levels = c("Not Canceled", "Canceled")),
Percentage = as.numeric(cancel_pct)
)
p1 <- ggplot(cancel_df, aes(x = Status, y = Percentage, fill = Status)) +
geom_bar(stat = "identity", width = 0.6) +
geom_text(aes(label = sprintf("%.2f%%", Percentage)), vjust = -0.5, size = 5) +
scale_fill_manual(values = c("Not Canceled" = "#617CFF", "Canceled" = "#9DDB7D")) +
labs(title = "Booking Cancellation Percentages", x = "IsCanceled", y = "Percentage of Bookings%") +
theme_minimal()
display_and_save_plot(p1, "booking_cancellation_percentages.png")
# 2. Lead Time by Cancellation Status
p2 <- ggplot(hotels, aes(x = factor(IsCanceled, labels = c("Not Canceled", "Canceled")), y = LeadTime)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Lead Time Distribution by Cancellation Status", x = "Cancellation Status", y = "Lead Time (days)")
display_and_save_plot(p2, "lead_time_by_status.png")
# 3. Cancellation Percentage by Deposit Type
p3 <- hotels %>%
group_by(DepositType, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(DepositType) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
ggplot(aes(x = DepositType, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Deposit Type", x = "Deposit Type", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"), name = "Status") +
theme_minimal()
display_and_save_plot(p3, "cancellation_by_deposit_type.png")
# 4. Cancellation Percentage by Season
p4 <- hotels %>%
group_by(Season, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(Season) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
ggplot(aes(x = Season, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Season", x = "Season", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"), name = "Status") +
theme_minimal()
display_and_save_plot(p4, "cancellation_by_season.png")
# 5. Cancellation Percentage by Month
p5 <- hotels %>%
group_by(ArrivalDateMonth, IsCanceled) %>%
summarise(Count = n(), .groups = "drop") %>%
group_by(ArrivalDateMonth) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
ggplot(aes(x = ArrivalDateMonth, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 3) +
labs(title = "Booking Cancellations by Month", x = "Month", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"), name = "Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
display_and_save_plot(p5, "cancellation_by_month.png")
# 6. Cancellation Percentage by Customer Type
p6 <- hotels %>%
group_by(CustomerType, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(CustomerType) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
ggplot(aes(x = CustomerType, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Customer Type", x = "Customer Type", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"), name = "Status") +
theme_minimal()
display_and_save_plot(p6, "cancellation_by_customer_type.png")
# -----------------------
# 3. Data Visualization: Focus on IsCanceled
# -----------------------
library(dplyr)
library(ggplot2)
# Ensure ArrivalDate is valid
hotels <- hotels %>%
mutate(ArrivalDate = as.Date(ArrivalDate))
# 1. Booking Cancellation Percentages
cancel_counts <- table(hotels$IsCanceled)
cancel_pct <- prop.table(cancel_counts) * 100
cancel_df <- data.frame(
Status = factor(c("Not Canceled", "Canceled"), levels = c("Not Canceled", "Canceled")),
Percentage = as.numeric(cancel_pct)
)
ggplot(cancel_df, aes(x = Status, y = Percentage, fill = Status)) +
geom_bar(stat = "identity", width = 0.6) +
geom_text(aes(label = sprintf("%.2f%%", Percentage)), vjust = -0.5, size = 5) +
scale_fill_manual(values = c("Not Canceled" = "#00BFC4", "Canceled" = "#F8766D")) +
labs(title = "Booking Cancellation Percentages", x = "Cancellation Status", y = "Percentage of Bookings") +
theme_minimal()
# 2. Lead Time Distribution by Cancellation Status
ggplot(hotels, aes(x = factor(IsCanceled, labels = c("Not Canceled", "Canceled")), y = LeadTime, fill = factor(IsCanceled))) +
geom_boxplot() +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled")) +
labs(title = "Lead Time Distribution by Cancellation Status", x = "Cancellation Status", y = "Lead Time (days)") +
theme_minimal()
# 3. Percentage of Cancellations by Customer Type
hotels %>%
group_by(CustomerType, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(CustomerType) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
ggplot(aes(x = CustomerType, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Customer Type", x = "Customer Type", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"), name = "Status") +
theme_minimal()
# 4. Percentage of Cancellations by Deposit Type
hotels %>%
group_by(DepositType, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(DepositType) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
ggplot(aes(x = DepositType, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Deposit Type", x = "Deposit Type", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"), name = "Status") +
theme_minimal()
# -----------------------
# 2. Data Engineering
# -----------------------
library(dplyr)
library(knitr)
library(kableExtra)  # Required for column_spec and kable_styling
# Data preparation
hotels <- hotels %>%
mutate(
ArrivalDate = as.Date(ArrivalDate),
ArrivalDateYear = format(ArrivalDate, "%Y"),
ArrivalDateDayOfMonth = format(ArrivalDate, "%d"),
PreviousCancellations = as.numeric(as.character(PreviousCancellations)),
PreviousBookingsNotCanceled = as.numeric(as.character(PreviousBookingsNotCanceled)),
TotalNights = StaysInWeekendNights + StaysInWeekNights,
IsWeekendStayRatio = ifelse(TotalNights > 0, StaysInWeekendNights / TotalNights, 0),
PreviousCancellation = ifelse(
PreviousBookingsNotCanceled + PreviousCancellations > 0,
PreviousCancellations / (PreviousBookingsNotCanceled + PreviousCancellations),
0
),
Season = ifelse(format(ArrivalDate, "%B") %in% c("December", "January", "February"), "Winter",
ifelse(format(ArrivalDate, "%B") %in% c("March", "April", "May"), "Spring",
ifelse(format(ArrivalDate, "%B") %in% c("June", "July", "August"), "Summer", "Autumn"))),
RequiredCarParkingSpacesFlag = ifelse(RequiredCarParkingSpaces > 0, "Yes", "No"),
CountryGroup = case_when(
Country == "PRT" ~ "Portugal",
Country %in% c("ESP", "GBR", "FRA", "DEU", "ITA") ~ "TopMarket",
Country %in% c("USA", "BEL", "BRA", "CHE", "IRL", "NLD") ~ "MediumMarket",
Country %in% c("AUT", "CHN", "ISR", "SWE", "POL") ~ "LowMarket",
TRUE ~ "MinorMarket"
),
HadSpecialRequest = ifelse(TotalOfSpecialRequests > 0, "Yes", "No"),
AgentKnown = ifelse(is.na(Agent) | Agent == "NULL" | Agent == "", "No", "Yes")
)
# Convert selected columns to factors
factor_vars <- c(
"Meal", "Country", "MarketSegment", "DistributionChannel", "IsRepeatedGuest",
"ReservedRoomType", "BookingChanges", "DepositType", "Agent", "Company",
"CustomerType", "IsCanceled"
)
hotels[factor_vars] <- lapply(hotels[factor_vars], factor)
# Display first 10 rows with centred text using kableExtra
kable(head(hotels, 10), format = "html", caption = "First 10 rows of the hotels dataset") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed")) %>%
column_spec(1:ncol(hotels), extra_css = "text-align: center;")
# -----------------------
# Clean Meal Variable and Summarise Dataset
# -----------------------
# Inspect unique values of the 'Meal' column
unique(hotels$Meal)
# Replace problematic categories with standard value
hotels$Meal <- as.character(hotels$Meal)
hotels$Meal[hotels$Meal %in% c("Undefined", "Undefined/SC")] <- "SC"
hotels$Meal <- as.factor(hotels$Meal)
# View dataset summary
summary(hotels)
# Missing Values and Outliers Treatment
# -----------------------
# Step 1: Replace missing values in key categorical and count variables
hotels <- hotels %>%
mutate(
Children = ifelse(is.na(Children), 0, Children),
Country = ifelse(is.na(Country), "Unknown", Country),
Agent = ifelse(is.na(Agent) | Agent == "NULL" | Agent == "", "No", Agent),
Company = ifelse(is.na(Company) | Company == "NULL" | Company == "", "No", Company)
)
# Step 2: Extract updated numeric columns (excluding BookingID)
numeric_cols <- sapply(hotels, is.numeric)
numeric_data <- hotels[, numeric_cols]
numeric_data <- numeric_data[, !(names(numeric_data) %in% c("BookingID"))]
# Step 3: Count outliers before treatment (for diagnostic plot)
count_outliers <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
sum(x < (Q1 - 1.5 * IQR) | x > (Q3 + 1.5 * IQR), na.rm = TRUE)
}
outlier_counts <- sapply(numeric_data, count_outliers)
outlier_df <- data.frame(
Variable = names(outlier_counts),
Outliers = as.numeric(outlier_counts)
)
# Step 4: Plot outlier count summary
library(ggplot2)
p <- ggplot(outlier_df, aes(x = reorder(Variable, Outliers), y = Outliers)) +
geom_bar(stat = "identity", fill = "tomato") +
coord_flip() +
labs(title = "Outlier Count per Numeric Variable", x = "Variable", y = "Number of Outliers") +
theme_minimal()
print(p)
ggsave("outlier_summary_plot.png", plot = p, width = 10, height = 6)
browseURL("outlier_summary_plot.png")
# Step 5: Treat outliers by replacing them with NA using the IQR method
clean_outliers_iqr <- function(vec, k = 1.5) {
Q1 <- quantile(vec, 0.25, na.rm = TRUE)
Q3 <- quantile(vec, 0.75, na.rm = TRUE)
IQR_value <- Q3 - Q1
lower <- Q1 - k * IQR_value
upper <- Q3 + k * IQR_value
vec_cleaned <- vec
vec_cleaned[vec < lower | vec > upper] <- NA
return(vec_cleaned)
}
# Step 6: List of target variables to clean and impute
outlier_vars <- c("Adults", "BookingChanges", "ADR", "LeadTime", "DaysInWaitingList",
"StaysInWeekendNights", "StaysInWeekNights", "TotalNights",
"Children", "Babies", "PreviousBookingsNotCanceled", "TotalOfSpecialRequests")
# Step 7: Clean outliers and impute with median
for (var in outlier_vars) {
if (var %in% names(hotels)) {
hotels[[var]] <- clean_outliers_iqr(hotels[[var]])
hotels[[var]][is.na(hotels[[var]])] <- median(hotels[[var]], na.rm = TRUE)
}
}
# -----------------------
# Full Missing Values and Outliers Treatment (Clean Version)
# -----------------------
library(dplyr)
library(ggplot2)
# Step 1: Replace missing values in categorical/count variables
hotels <- hotels %>%
mutate(
Children = ifelse(is.na(Children), 0, Children),
Country = ifelse(is.na(Country), "Unknown", Country),
Agent = ifelse(is.na(Agent) | Agent == "NULL" | Agent == "", "No", Agent),
Company = ifelse(is.na(Company) | Company == "NULL" | Company == "", "No", Company)
)
# Step 2: Extract numeric columns only (safely exclude BookingID if present)
numeric_cols <- sapply(hotels, is.numeric)
numeric_data <- hotels[, numeric_cols]
if ("BookingID" %in% names(numeric_data)) {
numeric_data <- numeric_data[, !(names(numeric_data) == "BookingID")]
}
# Step 3: Count outliers using IQR
count_outliers <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
sum(x < (Q1 - 1.5 * IQR) | x > (Q3 + 1.5 * IQR), na.rm = TRUE)
}
outlier_counts <- sapply(numeric_data, count_outliers)
outlier_df <- data.frame(
Variable = names(outlier_counts),
Outliers = as.numeric(outlier_counts)
)
# Step 4: Plot and save outlier summary
p <- ggplot(outlier_df, aes(x = reorder(Variable, Outliers), y = Outliers)) +
geom_bar(stat = "identity", fill = "tomato") +
coord_flip() +
labs(title = "Outlier Count per Numeric Variable", x = "Variable", y = "Number of Outliers") +
theme_minimal()
print(p)
ggsave("outlier_summary_plot.png", plot = p, width = 10, height = 6)
browseURL("outlier_summary_plot.png")
# Step 5: Define safe outlier cleaning function
clean_outliers_iqr <- function(vec, k = 1.5) {
if (is.factor(vec)) {
vec <- as.numeric(as.character(vec))
}
if (!is.numeric(vec)) return(vec)
Q1 <- quantile(vec, 0.25, na.rm = TRUE)
Q3 <- quantile(vec, 0.75, na.rm = TRUE)
IQR_value <- Q3 - Q1
lower <- Q1 - k * IQR_value
upper <- Q3 + k * IQR_value
vec_cleaned <- vec
vec_cleaned[vec < lower | vec > upper] <- NA
return(vec_cleaned)
}
# Step 6: List of variables to clean
outlier_vars <- c("Adults", "BookingChanges", "ADR", "LeadTime", "DaysInWaitingList",
"StaysInWeekendNights", "StaysInWeekNights", "TotalNights",
"Children", "Babies", "PreviousBookingsNotCanceled", "TotalOfSpecialRequests")
# Step 7: Apply cleaning and impute with median
for (var in outlier_vars) {
if (var %in% names(hotels)) {
hotels[[var]] <- clean_outliers_iqr(hotels[[var]])
hotels[[var]][is.na(hotels[[var]])] <- median(hotels[[var]], na.rm = TRUE)
}
}
# Step 8: Final boxplot of cleaned data
numeric_cols <- sapply(hotels, is.numeric)
numeric_data <- hotels[, numeric_cols]
if ("BookingID" %in% names(numeric_data)) {
numeric_data <- numeric_data[, !(names(numeric_data) == "BookingID")]
}
png("boxplot_all_numeric_cleaned.png", width = 1200, height = 600)
par(mar = c(12, 4, 4, 2) + 0.1, cex.axis = 0.7)
boxplot(numeric_data, las = 2, main = "Boxplot of Numeric Variables After Outlier Treatment", col = "lightblue")
dev.off()
browseURL("boxplot_all_numeric_cleaned.png")
# Step 9: Final missing value check
na_summary <- colSums(is.na(hotels))
print(na_summary)
if (all(na_summary == 0)) message("✅ No missing values remain in the dataset.")
