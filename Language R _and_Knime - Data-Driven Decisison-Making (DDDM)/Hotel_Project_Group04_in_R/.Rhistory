geom_boxplot(fill = "orange") +
labs(title = "Boxplot of Lead Time", y = "Lead Time")
# Scatter plot: ADR vs. LeadTime
ggplot(hotels, aes(x = LeadTime, y = ADR)) +
geom_point(alpha = 0.5, colour = "darkgreen") +
labs(title = "ADR vs Lead Time", x = "Lead Time", y = "ADR")
# -----------------------
# 3. Data Visualization: Focus on is_canceled
# -----------------------
# Load required library
library(ggplot2)
# 1. Booking cancellations percentage
cancel_counts <- table(hotels$is_canceled)
cancel_pct <- prop.table(cancel_counts) * 100
barplot(cancel_counts,
names.arg = c("Not Canceled", "Canceled"),
col = c("#00BFC4", "#F8766D"),
main = "Booking Cancellations Count",
ylab = "Count")
print(round(cancel_pct, 2))
# 2. Lead time distribution by cancellation status
ggplot(hotels, aes(x = factor(is_canceled, labels = c("Not Canceled", "Canceled")), y = LeadTime)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Lead Time by Cancellation Status", x = "Cancellation Status", y = "Lead Time")
# -----------------------
# 3. Data Visualization: Focus on IsCanceled
# -----------------------
# Load required library
library(ggplot2)
# 1. Booking cancellations percentage
cancel_counts <- table(hotels$IsCanceled)
cancel_pct <- prop.table(cancel_counts) * 100
barplot(cancel_counts,
names.arg = c("Not Canceled", "Canceled"),
col = c("#00BFC4", "#F8766D"),
main = "Booking Cancellations Count",
ylab = "Count")
# Show percentage of each cancellation status
print(round(cancel_pct, 2))
# 2. Lead time distribution by cancellation status
# This shows how lead time (days booked in advance) varies by cancellation status
p1 <- ggplot(hotels, aes(x = factor(IsCanceled, labels = c("Not Canceled", "Canceled")), y = LeadTime)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Lead Time by Cancellation Status", x = "Cancellation Status", y = "Lead Time")
print(p1)
ggsave("lead_time_by_cancellation.png", plot = p1, width = 8, height = 5)
# 3. Percentage of cancellations by deposit type
# Shows cancellation rates by type of deposit
p2 <- ggplot(hotels, aes(x = DepositType, fill = factor(IsCanceled))) +
geom_bar(position = "fill") +
labs(title = "Cancellation Rate by Deposit Type",
x = "Deposit Type", y = "Proportion") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"),
name = "Status")
print(p2)
ggsave("cancellation_by_deposit_type.png", plot = p2, width = 8, height = 5)
# 4. Cancellations per season
# Create a new variable "Season" from "ArrivalDateMonth"
hotels$Season <- with(hotels, ifelse(ArrivalDateMonth %in% c("December", "January", "February"), "Winter",
ifelse(ArrivalDateMonth %in% c("March", "April", "May"), "Spring",
ifelse(ArrivalDateMonth %in% c("June", "July", "August"), "Summer", "Autumn"))))
# Plot cancellation rate by season
p3 <- ggplot(hotels, aes(x = Season, fill = factor(IsCanceled))) +
geom_bar(position = "fill") +
labs(title = "Cancellation Rate by Season",
x = "Season", y = "Proportion") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"),
name = "Status")
print(p3)
# -----------------------
# 3. Data Visualization: Focus on IsCanceled
# -----------------------
# Load required library
library(ggplot2)
# 1. Booking cancellations percentage with labels
cancel_counts <- table(hotels$IsCanceled)
cancel_pct <- prop.table(cancel_counts) * 100
cancel_df <- data.frame(
Status = factor(c("Not Canceled", "Canceled"), levels = c("Not Canceled", "Canceled")),
Percentage = as.numeric(cancel_pct)
)
p0 <- ggplot(cancel_df, aes(x = Status, y = Percentage, fill = Status)) +
geom_bar(stat = "identity", width = 0.6) +
geom_text(aes(label = sprintf("%.2f%%", Percentage)), vjust = -0.5, size = 5) +
scale_fill_manual(values = c("Not Canceled" = "#617CFF", "Canceled" = "#9DDB7D")) +
labs(title = "Booking Cancellation Percentages", x = "IsCanceled", y = "Percentage of Bookings%") +
theme_minimal()
print(p0)
ggsave("booking_cancellation_percentages.png", plot = p0, width = 8, height = 6)
# 2. Lead time distribution by cancellation status
p1 <- ggplot(hotels, aes(x = factor(IsCanceled, labels = c("Not Canceled", "Canceled")), y = LeadTime)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Lead Time by Cancellation Status", x = "Cancellation Status", y = "Lead Time")
print(p1)
ggsave("lead_time_by_cancellation.png", plot = p1, width = 8, height = 5)
# 3. Percentage of cancellations by deposit type with labels
cancellation_deposit <- hotels %>%
group_by(DepositType, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(DepositType) %>%
mutate(Percentage = Count / sum(Count) * 100)
p2 <- ggplot(cancellation_deposit, aes(x = DepositType, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Deposit Type",
x = "Deposit Type", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"),
name = "Status") +
theme_minimal()
print(p2)
ggsave("cancellation_by_deposit_type.png", plot = p2, width = 8, height = 5)
# 4. Percentage of cancellations by season with labels
hotels$Season <- with(hotels, ifelse(ArrivalDateMonth %in% c("December", "January", "February"), "Winter",
ifelse(ArrivalDateMonth %in% c("March", "April", "May"), "Spring",
ifelse(ArrivalDateMonth %in% c("June", "July", "August"), "Summer", "Autumn"))))
cancellation_season <- hotels %>%
group_by(Season, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(Season) %>%
mutate(Percentage = Count / sum(Count) * 100)
p3 <- ggplot(cancellation_season, aes(x = Season, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Season",
x = "Season", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"),
name = "Status") +
theme_minimal()
print(p3)
# Automatically install and load packages if not already installed
required_packages <- c("tidyverse", "GGally", "corrplot", "rpart", "rpart.plot",
"randomForest", "lubridate", "pivottabler", "kableExtra",
"magrittr", "caret", "xgboost", "pROC", "psych", "MASS", "scales")
for(pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
hotels <- read.csv("DDDM24_Hotel_Data.csv")
# View the structure of hotels
str(hotels)
# -----------------------
# 2. Data Exploration
# -----------------------
# View basic structure and dimensions of the dataset
dim(hotels)              # Number of rows and columns
names(hotels)            # Names of all variables
str(hotels)              # Structure and data types of each column
# Summary statistics for each variable
summary(hotels)
# Check the number of missing values per column
colSums(is.na(hotels))
# Optional: check classes of each variable
sapply(hotels, class)
# Make sure required libraries are loaded
library(knitr)
library(kableExtra)
# # view the first few rows
knitr::kable(head(hotels, n = 10), format = "html", caption = "First 10 rows of the hotels dataset") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed")) %>%
column_spec(1:ncol(hotels), extra_css = "text-align: center;")
colnames(hotels)
# -----------------------
#Data Engineering
# -----------------------
# List of variables to convert to factor
factor_vars <- c(
"Meal", "Country", "MarketSegment", "DistributionChannel", "IsRepeatedGuest",
"PreviousCancellations", "PreviousBookingsNotCanceled", "ReservedRoomType",
"BookingChanges", "DepositType", "Agent", "Company", "CustomerType", "IsCanceled"
)
library(dplyr)
hotels <- hotels %>%
mutate(
ArrivalDate = as.Date(ArrivalDate),
# Extract only Year and Day (Month and Day of Week removed)
ArrivalDateYear = format(ArrivalDate, "%Y"),
ArrivalDateDayOfMonth = format(ArrivalDate, "%d"),
# Total nights
TotalNights = StaysInWeekendNights + StaysInWeekNights,
# Weekend stay ratio
IsWeekendStayRatio = ifelse(TotalNights > 0, StaysInWeekendNights / TotalNights, 0),
# Cancellation ratio
PreviousCancellation = ifelse(
PreviousBookingsNotCanceled + PreviousCancellations > 0,
PreviousCancellations / (PreviousBookingsNotCanceled + PreviousCancellations),
0
),
# Parking
RequiredCarParkingSpacesFlag = ifelse(RequiredCarParkingSpaces > 0, "Yes", "No"),
# Country group
CountryGroup = case_when(
Country == "PRT" ~ "Portugal",
Country %in% c("ESP", "GBR", "FRA", "DEU", "ITA") ~ "TopMarket",
Country %in% c("USA", "BEL", "BRA", "CHE", "IRL", "NLD") ~ "MediumMarket",
Country %in% c("AUT", "CHN", "ISR", "SWE", "POL") ~ "LowMarket",
TRUE ~ "MinorMarket"
),
# Special request
HadSpecialRequest = ifelse(TotalOfSpecialRequests > 0, "Yes", "No"),
# Agent known
AgentKnown = ifelse(is.na(Agent) | Agent == "NULL" | Agent == "", "No", "Yes")
)
# -----------------------
# 3. Data Visualization: Focus on IsCanceled
# -----------------------
# Load required library
library(ggplot2)
# 1. Booking cancellations percentage with labels
cancel_counts <- table(hotels$IsCanceled)
cancel_pct <- prop.table(cancel_counts) * 100
cancel_df <- data.frame(
Status = factor(c("Not Canceled", "Canceled"), levels = c("Not Canceled", "Canceled")),
Percentage = as.numeric(cancel_pct)
)
p0 <- ggplot(cancel_df, aes(x = Status, y = Percentage, fill = Status)) +
geom_bar(stat = "identity", width = 0.6) +
geom_text(aes(label = sprintf("%.2f%%", Percentage)), vjust = -0.5, size = 5) +
scale_fill_manual(values = c("Not Canceled" = "#617CFF", "Canceled" = "#9DDB7D")) +
labs(title = "Booking Cancellation Percentages", x = "IsCanceled", y = "Percentage of Bookings%") +
theme_minimal()
print(p0)
ggsave("booking_cancellation_percentages.png", plot = p0, width = 8, height = 6)
# 2. Lead time distribution by cancellation status
p1 <- ggplot(hotels, aes(x = factor(IsCanceled, labels = c("Not Canceled", "Canceled")), y = LeadTime)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Lead Time by Cancellation Status", x = "Cancellation Status", y = "Lead Time")
print(p1)
ggsave("lead_time_by_cancellation.png", plot = p1, width = 8, height = 5)
# 3. Percentage of cancellations by deposit type with labels
cancellation_deposit <- hotels %>%
group_by(DepositType, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(DepositType) %>%
mutate(Percentage = Count / sum(Count) * 100)
p2 <- ggplot(cancellation_deposit, aes(x = DepositType, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Deposit Type",
x = "Deposit Type", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"),
name = "Status") +
theme_minimal()
print(p2)
ggsave("cancellation_by_deposit_type.png", plot = p2, width = 8, height = 5)
# 4. Percentage of cancellations by season with labels
hotels$Season <- with(hotels, ifelse(ArrivalDateMonth %in% c("December", "January", "February"), "Winter",
ifelse(ArrivalDateMonth %in% c("March", "April", "May"), "Spring",
ifelse(ArrivalDateMonth %in% c("June", "July", "August"), "Summer", "Autumn"))))
cancellation_season <- hotels %>%
group_by(Season, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(Season) %>%
mutate(Percentage = Count / sum(Count) * 100)
# -----------------------
#Data Engineering
# -----------------------
# List of variables to convert to factor
factor_vars <- c(
"Meal", "Country", "MarketSegment", "DistributionChannel", "IsRepeatedGuest",
"PreviousCancellations", "PreviousBookingsNotCanceled", "ReservedRoomType",
"BookingChanges", "DepositType", "Agent", "Company", "CustomerType", "IsCanceled"
)
library(dplyr)
hotels <- hotels %>%
mutate(
ArrivalDate = as.Date(ArrivalDate),
# Extract only Year and Day (Month and Day of Week removed)
ArrivalDateYear = format(ArrivalDate, "%Y"),
ArrivalDateDayOfMonth = format(ArrivalDate, "%d"),
# Total nights
TotalNights = StaysInWeekendNights + StaysInWeekNights,
# Weekend stay ratio
IsWeekendStayRatio = ifelse(TotalNights > 0, StaysInWeekendNights / TotalNights, 0),
# Cancellation ratio
PreviousCancellation = ifelse(
PreviousBookingsNotCanceled + PreviousCancellations > 0,
PreviousCancellations / (PreviousBookingsNotCanceled + PreviousCancellations),
0
),
#Season
hotels$Season <- with(hotels, ifelse(ArrivalDateMonth %in% c("December", "January", "February"), "Winter",
ifelse(ArrivalDateMonth %in% c("March", "April", "May"), "Spring",
ifelse(ArrivalDateMonth %in% c("June", "July", "August"), "Summer", "Autumn"))))
# Parking
RequiredCarParkingSpacesFlag = ifelse(RequiredCarParkingSpaces > 0, "Yes", "No"),
# Country group
CountryGroup = case_when(
Country == "PRT" ~ "Portugal",
Country %in% c("ESP", "GBR", "FRA", "DEU", "ITA") ~ "TopMarket",
Country %in% c("USA", "BEL", "BRA", "CHE", "IRL", "NLD") ~ "MediumMarket",
Country %in% c("AUT", "CHN", "ISR", "SWE", "POL") ~ "LowMarket",
TRUE ~ "MinorMarket"
),
# Special request
HadSpecialRequest = ifelse(TotalOfSpecialRequests > 0, "Yes", "No"),
# Agent known
AgentKnown = ifelse(is.na(Agent) | Agent == "NULL" | Agent == "", "No", "Yes")
)
# Automatically install and load packages if not already installed
required_packages <- c("tidyverse", "GGally", "corrplot", "rpart", "rpart.plot",
"randomForest", "lubridate", "pivottabler", "kableExtra",
"magrittr", "caret", "xgboost", "pROC", "psych", "MASS", "scales")
for(pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
hotels <- read.csv("DDDM24_Hotel_Data.csv")
# View the structure of hotels
str(hotels)
# -----------------------
# 2. Data Exploration
# -----------------------
# View basic structure and dimensions of the dataset
dim(hotels)              # Number of rows and columns
names(hotels)            # Names of all variables
str(hotels)              # Structure and data types of each column
# Summary statistics for each variable
summary(hotels)
# Check the number of missing values per column
colSums(is.na(hotels))
# Optional: check classes of each variable
sapply(hotels, class)
# Make sure required libraries are loaded
library(knitr)
library(kableExtra)
# # view the first few rows
knitr::kable(head(hotels, n = 10), format = "html", caption = "First 10 rows of the hotels dataset") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed")) %>%
column_spec(1:ncol(hotels), extra_css = "text-align: center;")
load("C:/Users/Iacob Ciobanu/Documents/Git Projects/Uni-Projects/Language R _and_Knime - Data-Driven Decisison-Making (DDDM)/Hotel_Project_Group04_in_R/.RData")
# -----------------------
# 2. Data Engineering
# -----------------------
library(dplyr)
hotels <- hotels %>%
mutate(
ArrivalDate = as.Date(ArrivalDate),
# Extract year and day
ArrivalDateYear = format(ArrivalDate, "%Y"),
ArrivalDateDayOfMonth = format(ArrivalDate, "%d"),
# Total nights
TotalNights = StaysInWeekendNights + StaysInWeekNights,
# Weekend stay ratio
IsWeekendStayRatio = ifelse(TotalNights > 0, StaysInWeekendNights / TotalNights, 0),
# Cancellation ratio
PreviousCancellation = ifelse(
PreviousBookingsNotCanceled + PreviousCancellations > 0,
PreviousCancellations / (PreviousBookingsNotCanceled + PreviousCancellations),
0
),
# Season based on month
Season = ifelse(ArrivalDateMonth %in% c("December", "January", "February"), "Winter",
ifelse(ArrivalDateMonth %in% c("March", "April", "May"), "Spring",
ifelse(ArrivalDateMonth %in% c("June", "July", "August"), "Summer", "Autumn"))),
# Parking flag
RequiredCarParkingSpacesFlag = ifelse(RequiredCarParkingSpaces > 0, "Yes", "No"),
# Country group
CountryGroup = case_when(
Country == "PRT" ~ "Portugal",
Country %in% c("ESP", "GBR", "FRA", "DEU", "ITA") ~ "TopMarket",
Country %in% c("USA", "BEL", "BRA", "CHE", "IRL", "NLD") ~ "MediumMarket",
Country %in% c("AUT", "CHN", "ISR", "SWE", "POL") ~ "LowMarket",
TRUE ~ "MinorMarket"
),
# Special request flag
HadSpecialRequest = ifelse(TotalOfSpecialRequests > 0, "Yes", "No"),
# Agent known flag
AgentKnown = ifelse(is.na(Agent) | Agent == "NULL" | Agent == "", "No", "Yes")
)
colnames(hotels)
rlang::last_trace()
# -----------------------
# 2. Data Engineering
# -----------------------
library(dplyr)
hotels <- hotels %>%
mutate(
ArrivalDate = as.Date(ArrivalDate),
# Extract year and day
ArrivalDateYear = format(ArrivalDate, "%Y"),
ArrivalDateDayOfMonth = format(ArrivalDate, "%d"),
# Total nights
TotalNights = StaysInWeekendNights + StaysInWeekNights,
# Weekend stay ratio
IsWeekendStayRatio = ifelse(TotalNights > 0, StaysInWeekendNights / TotalNights, 0),
# Cancellation ratio
PreviousCancellation = ifelse(
PreviousBookingsNotCanceled + PreviousCancellations > 0,
PreviousCancellations / (PreviousBookingsNotCanceled + PreviousCancellations),
0
),
# Season based on month
Season = ifelse(ArrivalDateDayOfMonth %in% c("December", "January", "February"), "Winter",
ifelse(ArrivalDateDayOfMonth %in% c("March", "April", "May"), "Spring",
ifelse(ArrivalDateDayOfMonth %in% c("June", "July", "August"), "Summer", "Autumn"))),
# Parking flag
RequiredCarParkingSpacesFlag = ifelse(RequiredCarParkingSpaces > 0, "Yes", "No"),
# Country group
CountryGroup = case_when(
Country == "PRT" ~ "Portugal",
Country %in% c("ESP", "GBR", "FRA", "DEU", "ITA") ~ "TopMarket",
Country %in% c("USA", "BEL", "BRA", "CHE", "IRL", "NLD") ~ "MediumMarket",
Country %in% c("AUT", "CHN", "ISR", "SWE", "POL") ~ "LowMarket",
TRUE ~ "MinorMarket"
),
# Special request flag
HadSpecialRequest = ifelse(TotalOfSpecialRequests > 0, "Yes", "No"),
# Agent known flag
AgentKnown = ifelse(is.na(Agent) | Agent == "NULL" | Agent == "", "No", "Yes")
)
# Convert selected variables to factor
factor_vars <- c(
"Meal", "Country", "MarketSegment", "DistributionChannel", "IsRepeatedGuest",
"PreviousCancellations", "PreviousBookingsNotCanceled", "ReservedRoomType",
"BookingChanges", "DepositType", "Agent", "Company", "CustomerType", "IsCanceled"
)
hotels[factor_vars] <- lapply(hotels[factor_vars], factor)
# -----------------------
# 3. Data Visualization: Focus on IsCanceled
# -----------------------
# Load required library
library(ggplot2)
# 1. Booking cancellations percentage with labels
cancel_counts <- table(hotels$IsCanceled)
cancel_pct <- prop.table(cancel_counts) * 100
cancel_df <- data.frame(
Status = factor(c("Not Canceled", "Canceled"), levels = c("Not Canceled", "Canceled")),
Percentage = as.numeric(cancel_pct)
)
p0 <- ggplot(cancel_df, aes(x = Status, y = Percentage, fill = Status)) +
geom_bar(stat = "identity", width = 0.6) +
geom_text(aes(label = sprintf("%.2f%%", Percentage)), vjust = -0.5, size = 5) +
scale_fill_manual(values = c("Not Canceled" = "#617CFF", "Canceled" = "#9DDB7D")) +
labs(title = "Booking Cancellation Percentages", x = "IsCanceled", y = "Percentage of Bookings%") +
theme_minimal()
print(p0)
ggsave("booking_cancellation_percentages.png", plot = p0, width = 8, height = 6)
# 2. Lead time distribution by cancellation status
p1 <- ggplot(hotels, aes(x = factor(IsCanceled, labels = c("Not Canceled", "Canceled")), y = LeadTime)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Lead Time by Cancellation Status", x = "Cancellation Status", y = "Lead Time")
print(p1)
ggsave("lead_time_by_cancellation.png", plot = p1, width = 8, height = 5)
# 3. Percentage of cancellations by deposit type with labels
cancellation_deposit <- hotels %>%
group_by(DepositType, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(DepositType) %>%
mutate(Percentage = Count / sum(Count) * 100)
p2 <- ggplot(cancellation_deposit, aes(x = DepositType, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Deposit Type",
x = "Deposit Type", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"),
name = "Status") +
theme_minimal()
print(p2)
ggsave("cancellation_by_deposit_type.png", plot = p2, width = 8, height = 5)
# 4. Percentage of cancellations by season with labels
hotels$Season <- with(hotels, ifelse(ArrivalDateMonth %in% c("December", "January", "February"), "Winter",
ifelse(ArrivalDateMonth %in% c("March", "April", "May"), "Spring",
ifelse(ArrivalDateMonth %in% c("June", "July", "August"), "Summer", "Autumn"))))
cancellation_season <- hotels %>%
group_by(Season, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(Season) %>%
mutate(Percentage = Count / sum(Count) * 100)
p3 <- ggplot(cancellation_season, aes(x = Season, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Season",
x = "Season", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"),
name = "Status") +
theme_minimal()
print(p3)
ggsave("cancellation_by_season.png", plot = p3, width = 8, height = 5)
# 5. Percentage of cancellations by customer type with labels
cancellation_customer <- hotels %>%
group_by(CustomerType, IsCanceled) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(CustomerType) %>%
mutate(Percentage = Count / sum(Count) * 100)
p4 <- ggplot(cancellation_customer, aes(x = CustomerType, y = Percentage, fill = factor(IsCanceled))) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = sprintf("%.2f%%", Percentage)),
position = position_dodge(width = 0.9), vjust = -0.3, size = 4) +
labs(title = "Percentage of Cancellations by Customer Type",
x = "Customer Type", y = "% Cancelled") +
scale_fill_manual(values = c("0" = "#00BFC4", "1" = "#F8766D"),
labels = c("Not Canceled", "Canceled"),
name = "Status") +
theme_minimal()
print(p4)
ggsave("cancellation_by_customer_type.png", plot = p4, width = 8, height = 5)
