)
#Cancellations of Bookings Across Years
# Aggregate data: total bookings by year and cancellation status
year_summary <- hotels %>%
group_by(ArrivalDateYear, IsCanceled) %>%
summarise(Bookings = n(), .groups = "drop")
# Plot with counts above bars
ggplot(year_summary, aes(x = ArrivalDateYear, y = Bookings, fill = factor(IsCanceled))) +
geom_col(position = position_dodge(width = 0.9)) +
geom_text(aes(label = scales::comma(Bookings)),
position = position_dodge(width = 0.9),
vjust = -0.5, size = 3) +
scale_y_continuous(name = "No. of Bookings", labels = scales::comma) +
xlab("Years") +
ggtitle("Booking Cancellations by Year") +
labs(fill = "Cancelled (1 = Yes, 0 = No)") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 10),
plot.title = element_text(size = 14, face = "bold")
)
# Load required libraries
library(tidyverse)
library(forcats)
# Ensure English month names and correct ordering
Sys.setlocale("LC_TIME", "C")
hotels <- hotels %>%
mutate(
ArrivalDate = as.Date(ArrivalDate),
ArrivalDateYear = format(ArrivalDate, "%Y"),
ArrivalDateMonth = format(ArrivalDate, "%B"),
ArrivalDateMonth = fct_relevel(ArrivalDateMonth,
"January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
)
# Plot: Booking cancellations by month (with one row per year)
ggplot(hotels, aes(x = ArrivalDateMonth, fill = factor(IsCanceled))) +
geom_bar(position = "dodge") +
facet_wrap(~ ArrivalDateYear, ncol = 1) +
coord_cartesian(ylim = c(0, 3000)) +
scale_y_continuous(name = "No. of Bookings", labels = scales::comma) +
xlab("Months") +
ggtitle("Booking Cancellations per Month by Year") +
labs(fill = "Cancelled (1 = Yes, 0 = No)") +
scale_fill_manual(values = c("0" = "#1f77b4", "1" = "#fc9272")) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "bold"),
strip.text = element_text(size = 12)
)
# Season_cancel_plot
hotels <- hotels %>%
mutate(
Season = case_when(
ArrivalDateMonth %in% c("December", "January", "February") ~ "Winter",
ArrivalDateMonth %in% c("March", "April", "May") ~ "Spring",
ArrivalDateMonth %in% c("June", "July", "August") ~ "Summer",
ArrivalDateMonth %in% c("September", "October", "November") ~ "Autumn"
),
Season = factor(Season, levels = c("Winter", "Spring", "Summer", "Autumn"))
)
season_summary <- hotels %>%
group_by(ArrivalDateYear, Season, IsCanceled) %>%
summarise(Bookings = n(), .groups = "drop")
ggplot(season_summary, aes(x = Season, y = Bookings, fill = factor(IsCanceled))) +
geom_col(position = position_dodge(width = 0.9)) +
geom_text(aes(label = scales::comma(Bookings)),
position = position_dodge(width = 0.9),
vjust = -0.5, size = 3) +
facet_wrap(~ ArrivalDateYear, ncol = 1) +
coord_cartesian(ylim = c(0, 8000)) +
scale_y_continuous(name = "No. of Bookings", labels = scales::comma) +
xlab("Season") +
ggtitle("Booking Cancellations by Season and Year") +
labs(fill = "Cancelled (1 = Yes, 0 = No)") +
scale_fill_manual(values = c("0" = "#1f77b4", "1" = "#fc9272")) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 10),
plot.title = element_text(size = 14, face = "bold"),
strip.text = element_text(size = 12)
)
# Cancellations of Bookings Across Years
year_summary <- hotels %>%
group_by(ArrivalDateYear, IsCanceled) %>%
summarise(Bookings = n(), .groups = "drop")
ggplot(year_summary, aes(x = ArrivalDateYear, y = Bookings, fill = factor(IsCanceled))) +
geom_col(position = position_dodge(width = 0.9)) +
geom_text(aes(label = scales::comma(Bookings)),
position = position_dodge(width = 0.9),
vjust = -0.5, size = 3) +
scale_y_continuous(name = "No. of Bookings", labels = scales::comma) +
xlab("Years") +
ggtitle("Booking Cancellations by Year") +
labs(fill = "Cancelled (1 = Yes, 0 = No)") +
scale_fill_manual(values = c("0" = "#1f77b4", "1" = "#fc9272")) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 10),
plot.title = element_text(size = 14, face = "bold")
)
# -----------------------
# Boxplot before outlier treatment
# -----------------------
# This helps visualise which variables have extreme values
# Select only numeric columns and drop BookingID if present
numeric_cols <- sapply(hotels, is.numeric)
numeric_data <- hotels[, numeric_cols]
if ("BookingID" %in% names(numeric_data)) {
numeric_data <- numeric_data[, !(names(numeric_data) == "BookingID")]
}
# Show plot
par(mar = c(12, 4, 4, 2) + 0.1, cex.axis = 0.7)
boxplot(numeric_data, las = 2, main = "Boxplot of Numeric Variables Before Outlier Treatment", col = "#fc9272")
# Save as PNG
png("boxplot_before_outlier_treatment.png", width = 1200, height = 600)
par(mar = c(12, 4, 4, 2) + 0.1, cex.axis = 0.7)
boxplot(numeric_data, las = 2, main = "Boxplot of Numeric Variables Before Outlier Treatment", col = "#fc9272")
dev.off()
colSums(is.na(hotels))
# -----------------------
# Full Missing Values and Outliers Treatment
# -----------------------
library(dplyr)
library(ggplot2)
# Step 1: Replace missing values in categorical/count variables
hotels <- hotels %>%
mutate(
Children = ifelse(is.na(Children), 0, Children),
Country = ifelse(is.na(Country), "Unknown", Country),
Agent = ifelse(is.na(Agent) | Agent == "NULL" | Agent == "", "No", Agent),
Company = ifelse(is.na(Company) | Company == "NULL" | Company == "", "No", Company)
)
# Step 2: Extract numeric columns only (safely exclude BookingID if present)
numeric_data <- hotels %>% select_if(is.numeric)
if ("BookingID" %in% names(numeric_data)) {
numeric_data <- numeric_data[, !(names(numeric_data) == "BookingID")]
}
# Step 3: Count outliers using IQR
count_outliers <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
sum(x < (Q1 - 1.5 * IQR) | x > (Q3 + 1.5 * IQR), na.rm = TRUE)
}
outlier_counts <- sapply(numeric_data, count_outliers)
outlier_df <- data.frame(
Variable = names(outlier_counts),
Outliers = as.numeric(outlier_counts)
)
# Step 4: Plot outlier summary (BookingID excluded)
library(ggplot2)
ggplot(outlier_df, aes(x = reorder(Variable, Outliers), y = Outliers)) +
geom_bar(stat = "identity", fill = "tomato") +
coord_flip() +
labs(title = "Outlier Count per Numeric Variable", x = "Variable", y = "Number of Outliers") +
theme_minimal()
# Step 5: Define safe outlier cleaning function
clean_outliers_iqr <- function(vec, k = 1.5) {
if (is.factor(vec)) {
vec <- as.numeric(as.character(vec))
}
if (!is.numeric(vec)) return(vec)
Q1 <- quantile(vec, 0.25, na.rm = TRUE)
Q3 <- quantile(vec, 0.75, na.rm = TRUE)
IQR_value <- Q3 - Q1
lower <- Q1 - k * IQR_value
upper <- Q3 + k * IQR_value
vec_cleaned <- vec
vec_cleaned[vec < lower | vec > upper] <- NA
return(vec_cleaned)
}
# Step 6: List of variables to clean
outlier_vars <- c("Adults", "BookingChanges", "ADR", "LeadTime", "DaysInWaitingList",
"StaysInWeekendNights", "StaysInWeekNights", "TotalNights",
"Children", "Babies", "PreviousBookingsNotCanceled", "TotalOfSpecialRequests")
# Step 7: Apply cleaning and impute with median
for (var in outlier_vars) {
if (var %in% names(hotels)) {
hotels[[var]] <- clean_outliers_iqr(hotels[[var]])
hotels[[var]][is.na(hotels[[var]])] <- median(hotels[[var]], na.rm = TRUE)
}
}
# Step 8: Final boxplot of cleaned data
numeric_data <- hotels %>% select_if(is.numeric)
if ("BookingID" %in% names(numeric_data)) {
numeric_data <- numeric_data[, !(names(numeric_data) == "BookingID")]
}
boxplot(numeric_data, las = 2, main = "Boxplot of Numeric Variables After Outlier Treatment", col = "lightblue")
# Step 9: Final missing value check
na_summary <- colSums(is.na(hotels))
print(na_summary)
if (all(na_summary == 0)) message("\u2705 No missing values remain in the dataset.")
# -----------------------
# EDA Part
# -----------------------
# Load required libraries
library(psych)
library(skimr)
library(corrplot)
# Step 1: Select and scale numeric variables only (excluding empty or constant columns)
numeric_data <- hotels[, sapply(hotels, is.numeric)]
# Remove columns with only NAs or constant values
numeric_data <- numeric_data[, sapply(numeric_data, function(x) {
all(!is.na(x)) && length(unique(x)) > 1
})]
scaled_data <- scale(numeric_data)
# Step 2: Display scaled histograms for numeric variables
multi.hist(scaled_data,
freq = TRUE,
dcol = c("blue", "red"),
dlty = c("dotted", "solid"),
main = "Histograms of Scaled Numeric Variables")
# Step 3: Save histogram plot as PNG
png("multi_hist_scaled.png", width = 1200, height = 800)
multi.hist(scaled_data,
freq = TRUE,
dcol = c("blue", "red"),
dlty = c("dotted", "solid"),
main = "Histograms of Scaled Numeric Variables")
dev.off()
browseURL("multi_hist_scaled.png")
# Step 4: Summary statistics using skimr
skimmed <- skim(hotels)
print(skimmed)
# Step 5: Save summary to text file
sink("summary_statistics.txt")
print(skimmed)
sink()
# -----------------------
# EDA Part
# -----------------------
# Load required libraries
library(psych)
library(skimr)
library(corrplot)
# Step 1: Select and scale numeric variables only (excluding empty or constant columns)
numeric_data <- hotels[, sapply(hotels, is.numeric)]
# Remove columns with only NAs or constant values
numeric_data <- numeric_data[, sapply(numeric_data, function(x) {
all(!is.na(x)) && length(unique(x)) > 1
})]
scaled_data <- scale(numeric_data)
# Step 2: Display scaled histograms for numeric variables
multi.hist(scaled_data,
freq = TRUE,
dcol = c("blue", "red"),
dlty = c("dotted", "solid"),
main = "Histograms of Scaled Numeric Variables")
# Step 3: Save histogram plot as PNG
png("multi_hist_scaled.png", width = 1200, height = 800)
multi.hist(scaled_data,
freq = TRUE,
dcol = c("blue", "red"),
dlty = c("dotted", "solid"),
main = "Histograms of Scaled Numeric Variables")
dev.off()
browseURL("multi_hist_scaled.png")
# Step 4: Summary statistics using skimr
skimmed <- skim(hotels)
print(skimmed)
# -----------------------
# EDA Part
# -----------------------
# Load required libraries
library(psych)
library(skimr)
library(corrplot)
# Step 1: Select and scale numeric variables only (excluding empty or constant columns)
numeric_data <- hotels[, sapply(hotels, is.numeric)]
# Remove columns with only NAs or constant values
numeric_data <- numeric_data[, sapply(numeric_data, function(x) {
all(!is.na(x)) && length(unique(x)) > 1
})]
scaled_data <- scale(numeric_data)
# Step 2: Display scaled histograms for numeric variables
multi.hist(scaled_data,
freq = TRUE,
dcol = c("blue", "red"),
dlty = c("dotted", "solid"),
main = "Histograms of Scaled Numeric Variables")
# Step 4: Summary statistics using skimr
skimmed <- skim(hotels)
print(skimmed)
# -----------------------
# EDA Part
# -----------------------
# Load required libraries
library(psych)
library(skimr)
library(corrplot)
# Step 1: Select and scale numeric variables only (excluding empty or constant columns)
numeric_data <- hotels[, sapply(hotels, is.numeric)]
# Remove columns with only NAs or constant values
numeric_data <- numeric_data[, sapply(numeric_data, function(x) {
all(!is.na(x)) && length(unique(x)) > 1
})]
scaled_data <- scale(numeric_data)
# Step 2: Display scaled histograms for numeric variables
multi.hist(scaled_data,
freq = TRUE,
dcol = c("blue", "red"),
dlty = c("dotted", "solid"),
main = "Histograms of Scaled Numeric Variables")
# Step 4: Summary statistics using skimr
skimmed <- skim(hotels)
print(skimmed)
# -----------------------------
# Correlation Analysis Section
# -----------------------------
# Load required package
library(corrplot)
# Step 6: Correlation matrix of numeric variables
cor_matrix <- cor(numeric_data, use = "pairwise.complete.obs")
# Identify strong correlations (absolute > 0.7)
strong_corr <- which(abs(cor_matrix) > 0.7 & abs(cor_matrix) < 1, arr.ind = TRUE)
if (nrow(strong_corr) > 0) {
cat("\nStrong correlations (>|0.7|):\n")
for (i in seq_len(nrow(strong_corr))) {
cat(rownames(cor_matrix)[strong_corr[i, 1]], " & ", colnames(cor_matrix)[strong_corr[i, 2]], ": ",
round(cor_matrix[strong_corr[i, 1], strong_corr[i, 2]], 2), "\n")
}
} else {
cat("\nNo strong correlations above 0.7 found.\n")
}
# Save two-sided correlation matrix as PNG
png("correlation_matrix_twosided.png", width = 1000, height = 800)
corrplot(cor_matrix, method = "color", type = "full", tl.cex = 0.8, addCoef.col = "black")
dev.off()
# Display two-sided correlation matrix image inline
knitr::include_graphics("correlation_matrix_twosided.png")
write.csv(hotels, "Hotel_Data_Final_Clean.csv", row.names = FALSE)
# Automatically install and load packages if not already installed
required_packages <- c("tidyverse", "GGally", "corrplot", "rpart", "rpart.plot",
"randomForest", "lubridate", "pivottabler", "kableExtra",
"magrittr", "caret", "xgboost", "pROC", "psych", "MASS", "scales")
for(pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
hotels <- read.csv("DDDM24_Hotel_Data.csv")
# View the structure of hotels
str(hotels)
# -----------------------
# 2. Data Exploration
# -----------------------
# View basic structure and dimensions of the dataset
dim(hotels)              # Number of rows and columns
names(hotels)            # Names of all variables
str(hotels)              # Structure and data types of each column
# Summary statistics for each variable
summary(hotels)
# Check the number of missing values per column
colSums(is.na(hotels))
# Optional: check classes of each variable
sapply(hotels, class)
# Make sure required libraries are loaded
library(knitr)
library(kableExtra)
# view the first few rows
knitr::kable(head(hotels, n = 10), format = "html", caption = "First 10 rows of the hotels dataset") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed")) %>%
column_spec(1:ncol(hotels), extra_css = "text-align: center;")
colnames(hotels)
# -----------------------
# 3. Data Engineering
# -----------------------
library(dplyr)
library(knitr)
library(kableExtra)  # Required for column_spec and kable_styling
# Data preparation
Sys.setlocale("LC_TIME", "C")
hotels <- hotels %>%
mutate(
ArrivalDate = as.Date(ArrivalDate),
ArrivalDateMonth = format(ArrivalDate, "%B"),
ArrivalDateMonth = recode(ArrivalDateMonth,
"janeiro" = "January",
"fevereiro" = "February",
"março" = "March",
"abril" = "April",
"maio" = "May",
"junho" = "June",
"julho" = "July",
"agosto" = "August",
"setembro" = "September",
"outubro" = "October",
"novembro" = "November",
"dezembro" = "December"),
ArrivalDateYear = format(ArrivalDate, "%Y"),
ArrivalDateMonth = fct_relevel(ArrivalDateMonth,
"January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
)
#Create Previous Cancellations variable
PreviousCancellations = as.numeric(as.character(PreviousCancellations))
PreviousBookingsNotCanceled = as.numeric(as.character(PreviousBookingsNotCanceled))
# Create TotalRevenue (ADR x TotalNights)
TotalRevenue = ADR * TotalNight
# Create TotalNights
TotalNights = StaysInWeekendNights + StaysInWeekNights
# Create IsWeekendStayRatio
IsWeekendStayRatio = ifelse(TotalNights > 0, StaysInWeekendNights / TotalNights, 0)
PreviousCancellation = ifelse(
PreviousBookingsNotCanceled + PreviousCancellations > 0,
PreviousCancellations / (PreviousBookingsNotCanceled + PreviousCancellations),
0
)
# Create Season variable
Season = case_when(
ArrivalDateMonth %in% c("December", "January", "February") ~ "Winter",
ArrivalDateMonth %in% c("March", "April", "May") ~ "Spring",
ArrivalDateMonth %in% c("June", "July", "August") ~ "Summer",
ArrivalDateMonth %in% c("September", "October", "November") ~ "Autumn"
)
# -----------------------
# 3. Data Engineering
# -----------------------
# Load libraries
library(dplyr)
library(forcats)
library(knitr)
library(kableExtra)  # Required for column_spec and kable_styling
# Ensure date handling and ordered months
Sys.setlocale("LC_TIME", "C")
hotels <- hotels %>%
mutate(
ArrivalDate = as.Date(ArrivalDate),
ArrivalDateYear = format(ArrivalDate, "%Y"),
ArrivalDateMonth = format(ArrivalDate, "%B"),
ArrivalDateMonth = fct_relevel(ArrivalDateMonth,
"January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
)
# Create Season variable
hotels <- hotels %>%
mutate(
Season = case_when(
ArrivalDateMonth %in% c("December", "January", "February") ~ "Winter",
ArrivalDateMonth %in% c("March", "April", "May") ~ "Spring",
ArrivalDateMonth %in% c("June", "July", "August") ~ "Summer",
ArrivalDateMonth %in% c("September", "October", "November") ~ "Autumn"
),
Season = factor(Season, levels = c("Winter", "Spring", "Summer", "Autumn"))
)
# Data corrections and engineering
hotels <- hotels %>%
mutate(
PreviousCancellations = as.numeric(as.character(PreviousCancellations)),
PreviousBookingsNotCanceled = as.numeric(as.character(PreviousBookingsNotCanceled)),
TotalNights = StaysInWeekendNights + StaysInWeekNights,
TotalRevenue = ADR * TotalNights,
IsWeekendStayRatio = ifelse(TotalNights > 0, StaysInWeekendNights / TotalNights, 0),
PreviousCancellation = ifelse(
PreviousBookingsNotCanceled + PreviousCancellations > 0,
PreviousCancellations / (PreviousBookingsNotCanceled + PreviousCancellations),
0
),
RequiredCarParkingSpacesFlag = ifelse(RequiredCarParkingSpaces > 0, "Yes", "No"),
HadSpecialRequest = ifelse(TotalOfSpecialRequests > 0, "Yes", "No"),
AgentKnown = ifelse(is.na(Agent) | Agent == "NULL" | Agent == "", "No", "Yes"),
CountryGroup = case_when(
Country == "PRT" ~ "Portugal",
Country %in% c("ESP", "GBR", "FRA", "DEU", "ITA") ~ "TopMarket",
Country %in% c("USA", "BEL", "BRA", "CHE", "IRL", "NLD") ~ "MediumMarket",
Country %in% c("AUT", "CHN", "ISR", "SWE", "POL") ~ "LowMarket",
TRUE ~ "MinorMarket"
)
)
# Create Lead Time Group
hotels <- hotels %>%
mutate(LeadTimeGroup = case_when(
LeadTime <= 50 ~ "0-50",
LeadTime <= 100 ~ "50-100",
LeadTime <= 150 ~ "100-150",
LeadTime <= 200 ~ "150-200",
LeadTime <= 250 ~ "200-250",
LeadTime <= 300 ~ "250-300",
LeadTime <= 350 ~ "300-350",
LeadTime <= 400 ~ "350-400",
LeadTime <= 450 ~ "400-450",
LeadTime <= 500 ~ "450-500",
TRUE ~ ">500"
))
# Create Total Revenue Group
hotels <- hotels %>%
mutate(TotalRevenueGroup = case_when(
TotalRevenue <= 100 ~ "0-100",
TotalRevenue <= 250 ~ "100-250",
TotalRevenue <= 500 ~ "250-500",
TotalRevenue <= 750 ~ "500-750",
TotalRevenue <= 1000 ~ "750-1000",
TotalRevenue <= 1500 ~ "1000-1500",
TotalRevenue <= 2000 ~ "1500-2000",
TRUE ~ ">2000"
))
# Convert selected columns to factors
factor_vars <- c(
"Meal", "Country", "MarketSegment", "DistributionChannel", "IsRepeatedGuest",
"ReservedRoomType", "BookingChanges", "DepositType", "Agent", "Company",
"CustomerType", "IsCanceled"
)
hotels[factor_vars] <- lapply(hotels[factor_vars], factor)
# Export to new clean CSV
write.csv(hotels, "Hotel_Data_Tableau_Ready.csv", row.names = FALSE)
# Display first 10 rows with centred text using kableExtra
kable(head(hotels, 10), format = "html", caption = "First 10 rows of the hotels dataset") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed")) %>%
column_spec(1:ncol(hotels), extra_css = "text-align: center;")
